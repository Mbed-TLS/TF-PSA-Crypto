#!/usr/bin/env python3
"""Test the configuration checks generated by generate_config_checks.py.
"""

## Copyright The Mbed TLS Contributors
## SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later

import unittest

import scripts_path # pylint: disable=unused-import
from mbedtls_framework import unittest_config_checks


class CryptoTestConfigChecks(unittest_config_checks.TestConfigChecks):
    """TF-PSA-Crypto unit tests for config checks."""

    #pylint: disable=invalid-name # uppercase letters make sense here

    PROJECT_CONFIG_C = 'core/tf_psa_crypto_config.c'
    PROJECT_SPECIFIC_INCLUDE_DIRECTORIES = [
        'drivers/builtin/include',
    ]

    def test_crypto_config_read(self) -> None:
        """Check that crypto_config.h is read in crypto."""
        self.bad_case('#error witness',
                      error='witness')

    def test_crypto_mbedtls_config_not_read(self) -> None:
        """Check that mbedtls_config.h is not read in crypto."""
        self.good_case('',
                       '#error "mbedtls_config.h was read"')

    def test_crypto_undef_MBEDTLS_FS_IO(self) -> None:
        """A sample error expected from check_config.h."""
        self.bad_case('#undef MBEDTLS_FS_IO',
                      error=('MBEDTLS_PSA_ITS_FILE_C'))

    def test_crypto_non_exempt_undef_MBEDTLS_FS_IO(self) -> None:
        """CONFIG_CHECK_BYPASS does not affect check_config.h.

        This is the historical behavior, which may change if needed.
        """
        self.bad_case('#undef MBEDTLS_FS_IO',
                      extra_options=['-DTF_PSA_CRYPTO_CONFIG_CHECK_BYPASS'])

    def test_crypto_define_MBEDTLS_MD5_C(self) -> None:
        """Error when setting an internal option that used to be public."""
        self.bad_case('#define MBEDTLS_MD5_C',
                      error=('MBEDTLS_MD5_C'))

    def test_crypto_exempt_define_MBEDTLS_MD5_C(self) -> None:
        """Bypassed error when setting an internal option that used to be public."""
        self.good_case('#define MBEDTLS_MD5_C',
                       extra_options=['-DTF_PSA_CRYPTO_CONFIG_CHECK_BYPASS'])

    @unittest.skip("Currently we can't check if a macro gets undefined.")
    def test_crypto_undef_MBEDTLS_MD5_C(self) -> None:
        """Error when unsetting an internal option that used to be public."""
        self.bad_case('#undef MBEDTLS_MD5_C',
                      error=('MBEDTLS_MD5_C'))

    def test_crypto_define_MBEDTLS_PADLOCK_C(self) -> None:
        """Error when setting a removed option."""
        self.bad_case('#define MBEDTLS_PADLOCK_C',
                      error=('MBEDTLS_PADLOCK_C was removed'))

    def test_crypto_nv_seed_only_with_entropy_no_sources_ok(self) -> None:
        """NV-seed-only configuration with MBEDTLS_ENTROPY_NO_SOURCES_OK defined
        to acknowledge that there is no true entropy source and that the
        loss of security is acceptable.
        """
        self.good_case('''
                       #undef MBEDTLS_PSA_BUILTIN_GET_ENTROPY
                       #define MBEDTLS_ENTROPY_NV_SEED
                       #define MBEDTLS_ENTROPY_NO_SOURCES_OK
                       ''')

    def test_crypto_nv_seed_only_without_entropy_no_sources_ok(self) -> None:
        """NV-seed-only configuration without MBEDTLS_ENTROPY_NO_SOURCES_OK defined
        An error expected from tf_psa_crypto_check_config.h.
        """
        self.bad_case('''
                      #undef MBEDTLS_PSA_BUILTIN_GET_ENTROPY
                      #define MBEDTLS_ENTROPY_NV_SEED
                      ''',
                      error=(r'Entropy module enabled, but no true sources'))

    def test_crypto_external_rng_with_nv_seed(self) -> None:
        """External RNG and NV seed
        An error expected from tf_psa_crypto_check_config.h.
        """
        self.bad_case('''
                      #define MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG
                      #define MBEDTLS_ENTROPY_NV_SEED
                      ''',
                      error=(
                          r'MBEDTLS_ENTROPY_NV_SEED has no effect when MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG is enabled' # pylint: disable=line-too-long
                      ))

if __name__ == '__main__':
    unittest.main()
