component_test_default_cmake_gcc_asan () {
    msg "build: default, gcc, ASan"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Asan "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    msg "test: main suites (ASan build)"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

component_test_ccm_aes_sha256() {
    msg "build: ccm-aes-sha256.h, gcc, ASan"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Asan -D TF_PSA_CRYPTO_CONFIG_FILE="configs/ccm-aes-sha256.h" "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    msg "test: main suites"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

component_test_ccm_aes_sha256_secp256r1() {
    msg "build: ccm-aes-sha256-secp256r1.h, gcc, ASan"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Asan -D TF_PSA_CRYPTO_CONFIG_FILE="configs/ccm-aes-sha256-secp256r1.h" "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    msg "test: main suites"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

component_test_gcm_ccm_cbc_aes_sha256_512_secp256_384r1_rsa() {
    msg "build: gcm-ccm-cbc-aes-sha256_512-secp256_384r1-rsa.h, gcc, ASan"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Asan -D TF_PSA_CRYPTO_CONFIG_FILE="configs/gcm-ccm-cbc-aes-sha256_512-secp256_384r1-rsa.h" "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    msg "test: main suites"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

# check_renamed_symbols HEADER LIB
# Check that if HEADER contains '#define MACRO ...' then MACRO is not a symbol
# name is LIB.
check_renamed_symbols () {
    ! nm "$2" | sed 's/.* //' |
      grep -x -F "$(sed -n 's/^ *# *define  *\([A-Z_a-z][0-9A-Z_a-z]*\)..*/\1/p' "$1")"
}

component_build_tf_psa_crypto_spm () {
    msg "build: default config + TF_PSA_CRYPTO_KEY_ID_ENCODES_OWNER + TF_PSA_CRYPTO_SPM, make, gcc"
    scripts/config.py -f include/psa/crypto_config.h set TF_PSA_CRYPTO_KEY_ID_ENCODES_OWNER
    scripts/config.py -f include/psa/crypto_config.h set TF_PSA_CRYPTO_SPM

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D ENABLE_TESTING=Off -D ENABLE_PROGRAMS=Off -D CMAKE_C_FLAGS="-I$TF_PSA_CRYPTO_ROOT_DIR/tests/include/spe" ..

    make

    # Check that if a symbol is renamed by crypto_spe.h, the non-renamed
    # version is not present.
    echo "Checking for renamed symbols in the library"
    check_renamed_symbols $TF_PSA_CRYPTO_ROOT_DIR/tests/include/spe/crypto_spe.h core/libtfpsacrypto.a

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

component_test_psa_compliance () {
    msg "build: default, gcc"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Release "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    msg "unit test: test_psa_compliance.py"
    ./tests/scripts/test_psa_compliance.py

    rm -rf "$OUT_OF_SOURCE_DIR"
}

support_test_psa_compliance () {
    # psa-compliance-tests only supports CMake >= 3.10.0
    ver="$(cmake --version)"
    ver="${ver#cmake version }"
    ver_major="${ver%%.*}"

    ver="${ver#*.}"
    ver_minor="${ver%%.*}"

    [ "$ver_major" -eq 3 ] && [ "$ver_minor" -ge 10 ]
}

component_test_non_psa_modules () {
    msg "build: non-PSA modules, gcc"

    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_BASE64_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_DHM_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_ECP_WITH_MPI_UINT
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_NIST_KW_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_PEM_PARSE_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_PEM_WRITE_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_PKCS5_C
    scripts/config.py -f drivers/builtin/include/mbedtls/mbedtls_config.h set MBEDTLS_PKCS12_C

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    cmake -D CMAKE_BUILD_TYPE:String=Release "$TF_PSA_CRYPTO_ROOT_DIR"
    make

    msg "test: main suites"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}

component_test_psa_drivers () {
    msg "build: default + TF_PSA_CRYPTO_DRIVER_TEST, gcc"

    TF_PSA_CRYPTO_ROOT_DIR="$PWD"
    mkdir "$OUT_OF_SOURCE_DIR"
    cd "$OUT_OF_SOURCE_DIR"
    loc_cflags="-DPSA_CRYPTO_DRIVER_TEST"
    loc_cflags="${loc_cflags} -I$TF_PSA_CRYPTO_ROOT_DIR/tests/include"
    cmake -D CMAKE_BUILD_TYPE:String=Asan -D CMAKE_C_FLAGS="${loc_cflags}" ..
    make

    msg "test: main suites"
    make test

    cd "$TF_PSA_CRYPTO_ROOT_DIR"
    rm -rf "$OUT_OF_SOURCE_DIR"
}
